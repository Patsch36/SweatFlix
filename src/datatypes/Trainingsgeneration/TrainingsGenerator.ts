import { store } from "@/stores/IonicStorage";
import { useDatabaseStore } from "@/stores/databaseStore";
import { WorkoutGenerator } from "@/datatypes/Trainingsgeneration/WorkoutGenerator";
import { PlanGenerator } from "@/datatypes/Trainingsgeneration/PlanGenerator";
import { Workout } from "./datatypes";
import { availableColors } from "../CalendarTypes";

/**
 * Represents a workout generator that generates a workout based on personal data and exercises from the database.
 */
export class TrainingsGenerator {
  private db: any;
  private exercises: any;

  // =======

  private workoutgenerator!: WorkoutGenerator;
  private plangenerator!: PlanGenerator;

  /**
   * Initializes a new instance of the WorkoutGenerator class.
   */
  constructor() {
    this.getPersonalData().then((persDat) => {
      const query = `SELECT * FROM Exercise;`;
      this.db = useDatabaseStore().getDatabase();
      this.db?.query(query).then((res: any[]) => {
        this.exercises = res.values ? res.values : [];
        this.workoutgenerator = new WorkoutGenerator(
          this.exercises,
          persDat.age,
          persDat.gender,
          persDat.workoutDays,
          persDat.activityLevel,
          persDat.goalAnatomy
        );
        this.plangenerator = new PlanGenerator(
          persDat.workoutDays,
          persDat.age,
          persDat.activityLevel,
          persDat.goalAnatomy
        );
      });
    });
  }

  /**
   * Generates a workout based on personal data and exercises from the database.
   * If personal data is not available, it will be fetched before generating the workout.
   */
  public generateWorkout() {
    if (!this.workoutgenerator) {
      this.getPersonalData().then(() => {
        const query = `SELECT * FROM Exercise;`;
        this.db = useDatabaseStore().getDatabase();
        this.db?.query(query).then((exercises: any[]) => {
          this.exercises = exercises.values ? exercises.values : [];

          this.generate();
        });
      });
    } else {
      this.generate();
    }
  }

  /**
   * Saves the generated workout plan to the database.
   * @param workoutTemplate - The generated workout plan.
   * @param plan - The plan details, including scheme and start workout.
   * @returns A Promise that resolves when the workout plan is saved to the database.
   */
  private async saveToDatabase(
    workoutTemplate: Workout[],
    plan: {
      scheme: string;
      startWorkout: string;
    }
  ) {
    const loadUsedColors = `SELECT DISTINCT color FROM WorkoutTemplate Where active = 1`;

    const resp = await this.db.query(loadUsedColors);
    let usedColors = resp?.values ? resp.values : [];
    usedColors = usedColors.map((color: any) => color.Color.toLowerCase());

    const notUsedColors = Object.keys(availableColors).filter(
      (color) => !usedColors.includes(color.toLowerCase())
    );
    const datestring = new Date().toLocaleString();

    const insertPlanQuery = `INSERT INTO Plan (name, description, type, place, split, scheme) VALUES ('Autogenerated Plan from ${datestring}', 'This Plan is autogenerated from ${datestring}. It contains workouts for ${workoutTemplate
      .map((workout) => workout.workoutName)
      .join(", ")}', '${this.plangenerator.getPlanType()}', 'Gym', '${
      workoutTemplate.length
    }-way split', '${plan.scheme}');`;
    console.log(insertPlanQuery);
    await this.db.run(insertPlanQuery);

    for (let workout in workoutTemplate) {
      const randomColor =
        notUsedColors[Math.round(Math.random() * (notUsedColors.length - 1))];
      notUsedColors.splice(notUsedColors.indexOf(randomColor), 1);

      const workouttemplateqery = `INSERT INTO WorkoutTemplate (Name, Split, Description, Color, active) VALUES ('${
        workoutTemplate[workout].workoutName + "-" + datestring
      }', '${
        workoutTemplate[workout].workoutName
      }', 'This Workout Template is autogenerated from ${datestring}.', '${randomColor}', 1)`;
      console.log(workouttemplateqery);
      await this.db.run(workouttemplateqery);

      const insertWorkoutTemplatePlanQuery = `INSERT INTO WorkoutTemplatePlan (WorkoutTemplateName, PlanID, OrderIndex) VALUES ('${
        workoutTemplate[workout].workoutName + "-" + datestring
      }', (SELECT ID FROM Plan WHERE name = 'Autogenerated Plan from ${datestring}'), ${workout})`;
      console.log(insertWorkoutTemplatePlanQuery);
      await this.db.run(insertWorkoutTemplatePlanQuery);

      // Insert all Exercises in WorkoutList
      for (let exercise in workoutTemplate[workout].exercises) {
        const insertExerciseQuery = `INSERT INTO WorkoutList (OrderIndex, workoutPlan, exerciseName, sets, reps) VALUES (${exercise}, '${
          workoutTemplate[workout].workoutName + "-" + datestring
        }', '${workoutTemplate[workout].exercises[exercise].exercisename}', ${
          workoutTemplate[workout].exercises[exercise].sets
        }, '${workoutTemplate[workout].exercises[exercise].reps}')`;
        console.log(insertExerciseQuery);
        await this.db.run(insertExerciseQuery);
      }
    }

    // DELETE FROM workoutlist WHERE workoutplan LIKE '%17.10.2023%';
    // DELETE FROM workouttemplate WHERE name LIKE '%17.10.2023%';
  }

  /**
   * Generates a workout by evaluating the split and creating the workout.
   * @private
   */
  private generate() {
    if (this.workoutgenerator) {
      const workoutTemplates = this.workoutgenerator.generate();
      console.log(workoutTemplates);
      const plan = this.plangenerator.generate("Mondays", workoutTemplates);
      console.log(plan);
      this.saveToDatabase(workoutTemplates, plan);
    } else alert("No personal data fetched. Try again or enter personal data.");
  }

  /**
   * Retrieves personal data from the store and sets it to the corresponding properties of the WorkoutGenerator instance.
   * @returns {Promise<void>}
   */
  private async getPersonalData() {
    const desiredWeight = await store.get("Weight Goal");
    const height = (await store.get("Height")) || 0;
    const age = (await store.get("Age")) || 0;
    const gender = (await store.get("Gender")) || "";
    const activityLevel = (await store.get("Activity Level")) || "";
    const workoutDays = JSON.parse(await store.get("Workout Days")) || {
      Mondays: true,
      Tuesdays: true,
      Wednesdays: true,
      Thursdays: true,
      Fridays: true,
      Saturdays: false,
      Sundays: false,
    };
    const goalAnatomy = (await store.get("GoalAnatomy")) || "";

    return {
      desiredWeight: desiredWeight,
      height: height,
      age: age,
      gender: gender,
      activityLevel: activityLevel,
      workoutDays: workoutDays,
      goalAnatomy: goalAnatomy,
    };
  }
}
